# -*- coding: utf-8 -*-
"""Exploratory Data Analysis (EDA) on Time Series Data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yV1LkFGsNiH4TwdPSPIOESnyoC7MGiZf
"""

!pip install pandas

!pip install numpy

!pip install seaborn
!pip install statsmodels
!pip install scikit-learn
!pip install xgboost

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import statsmodels.api as sm
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.tsa.statespace.sarimax import SARIMAX
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.ensemble import RandomForestRegressor
from xgboost import XGBRegressor

# Load dataset
df = pd.read_csv("AirQualityUCI.csv", sep = ";", decimal=',')

print(df.shape)
df.head()

# Clean input table
df = df.drop(columns=["Unnamed: 15", "Unnamed: 16"])
df.head()

# Check missing NA
missing_counts = df.isna().sum()
print(missing_counts)

print(df.isna())

# Remove NAs
df = df.dropna()

missing_counts = df.isna().sum()
print(missing_counts)

# Total records
total_records = df.shape[0]
print(f"Total records: {total_records}")

# Check missing values
missing_counts = (df == -200).sum()
print(missing_counts)

# Transform missing values -200 to NAs
df.replace(-200, pd.NA, inplace=True)
missing_counts = df.isna().sum()
print(missing_counts)

# Handle missing values
# For few missing data -> remove the records
df = df.dropna(subset=['PT08.S1(CO)', 'C6H6(GT)', 'PT08.S2(NMHC)', 'PT08.S3(NOx)', 'PT08.S4(NO2)', 'PT08.S5(O3)', 'T', 'RH', 'AH'])
missing_counts = df.isna().sum()
print(missing_counts)

# Total records
total_records = df.shape[0]
print(f"Total records: {total_records}")

# Handle missing values
# Replace missing values with mean
for column in ['CO(GT)', 'NOx(GT)', 'NO2(GT)']:
    df[column] = df[column].fillna(df[column].mean())
missing_counts = df.isna().sum()
print(missing_counts)

# Total records
total_records = df.shape[0]
print(f"Total records: {total_records}")

# Handle missing values
# Drop the column
df = df.drop(columns=['NMHC(GT)'])
missing_counts = df.isna().sum()
print(missing_counts)

for column in df.select_dtypes(include='number'):
    print(column, df[column].mean())

# Convert Date to datetime
df['Date'] = pd.to_datetime(df['Date'], format='%d/%m/%Y')

# Plot CO concentration
plt.plot(df['Date'], df['CO(GT)'], color='blue')
plt.title('CO Concentration')
plt.xlabel('Date')
plt.ylabel('Concentration(mg/m³)')
plt.show()

# Plot NOx concentration
plt.plot(df['Date'], df['NOx(GT)'], color='green')
plt.title('NOx Concentration')
plt.xlabel('Date')
plt.ylabel('Concentration(ppb)')
plt.show()

# Plot Benzene concentration
plt.plot(df['Date'], df['C6H6(GT)'], label='Benzene Concentration', color='red')
plt.title('Benzene Concentration')
plt.xlabel('Date')
plt.ylabel('Concentration(µg/m³)')
plt.show()

# Plot NO2 concentration
plt.plot(df['Date'], df['NO2(GT)'], label='NO2 Concentration', color='orange')
plt.title('NO2 Concentration')
plt.xlabel('Date')
plt.ylabel('Concentration(µg/m³)')
plt.show()

# Plot bar graph
# Plot for CO
fig, ax = plt.subplots(figsize=(12, 6))
width = 4
ax.bar(df['Date'], df['CO(GT)'], width=width, color='blue')

ax.set_xlabel("Date")
ax.set_ylabel("Concentration(mg/m³)")
ax.set_title("Bar Chart of CO")
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

# Plot for NOx
fig, ax = plt.subplots(figsize=(12, 6))
width = 4
ax.bar(df['Date'], df['NOx(GT)'], width=width, color='red')

ax.set_xlabel("Date")
ax.set_ylabel("Concentration (ppb)")
ax.set_title("Bar Chart of NOx")
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

# Plot for Benzene
fig, ax = plt.subplots(figsize=(12, 6))
width = 4
ax.bar(df['Date'], df['C6H6(GT)'], width=width, color='green')

ax.set_xlabel("Date")
ax.set_ylabel("Concentration (µg/m³)")
ax.set_title("Bar Chart of Benzene")
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

# Plot for NO2(GT)
fig, ax = plt.subplots(figsize=(12, 6))
width = 4
ax.bar(df['Date'], df['NO2(GT)'], width=width, color='orange')

ax.set_xlabel("Date")
ax.set_ylabel("Concentration (µg/m³)")
ax.set_title("Bar Chart of NO2(GT)")
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

# Daily / Weekly patterns

# Daily
# Format date
df['DateTime'] = pd.to_datetime(df['Date'].astype(str) + ' ' + df['Time'].str.replace('.', ':'), format='%Y-%m-%d %H:%M:%S')
df['Hour'] = df['DateTime'].dt.hour

# Group by Hour and compute mean
hourly_avg = df.groupby('Hour')[['CO(GT)', 'NOx(GT)', 'C6H6(GT)', 'NO2(GT)']].mean()

# Plot Daily Pattern for CO
plt.figure(figsize=(10, 5))
plt.plot(hourly_avg.index, hourly_avg['CO(GT)'], marker='o', label='CO', color='blue')

plt.title('Daily Patterns (Average by Hour of Day)')
plt.xlabel('Hour of Day')
plt.ylabel('Average Concentration')
plt.xticks(range(24))  # Set x-axis from 0 to 23 (hours)
plt.grid(True)
plt.legend()
plt.show()

# Plot Daily Pattern for NOx
plt.figure(figsize=(10, 5))
plt.plot(hourly_avg.index, hourly_avg['NOx(GT)'], marker='s', label='NOx', color='red')

plt.title('Daily Patterns (Average by Hour of Day)')
plt.xlabel('Hour of Day')
plt.ylabel('Average Concentration')
plt.xticks(range(24))  # Set x-axis from 0 to 23 (hours)
plt.grid(True)
plt.legend()
plt.show()

# Plot Daily Pattern for Benzene
plt.figure(figsize=(10, 5))
plt.plot(hourly_avg.index, hourly_avg['C6H6(GT)'], marker='^', label='Benzene', color='green')

plt.title('Daily Patterns (Average by Hour of Day)')
plt.xlabel('Hour of Day')
plt.ylabel('Average Concentration')
plt.xticks(range(24))  # Set x-axis from 0 to 23 (hours)
plt.grid(True)
plt.legend()
plt.show()

# Plot Daily Pattern for NO2
plt.figure(figsize=(10, 5))
plt.plot(hourly_avg.index, hourly_avg['NO2(GT)'], marker='D', label='NO2', color='orange')

plt.title('Daily Patterns (Average by Hour of Day)')
plt.xlabel('Hour of Day')
plt.ylabel('Average Concentration')
plt.xticks(range(24))  # Set x-axis from 0 to 23 (hours)
plt.grid(True)
plt.legend()
plt.show()

# Daily / Weekly patterns

# Weekly
# Format date
df['Day_of_Week'] = df['DateTime'].dt.dayofweek

# Group by day of week and compute mean
weekly_avg = df.groupby('Day_of_Week')[['CO(GT)', 'NOx(GT)', 'C6H6(GT)', 'NO2(GT)']].mean()

# Define custom labels for days of the week
days_labels = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']

# Plot Weekly Pattern for CO
plt.figure(figsize=(10, 5))
plt.plot(weekly_avg.index, weekly_avg['CO(GT)'], marker='o', label='CO', color='blue')

plt.xticks(ticks=range(7), labels=days_labels)  # Set custom day labels
plt.title('Weekly Patterns (Average by Day of Week)')
plt.xlabel('Day of the Week')
plt.ylabel('Average Concentration')
plt.grid(True)
plt.legend()
plt.show()

# Plot Weekly Pattern for NOx
plt.figure(figsize=(10, 5))
plt.plot(weekly_avg.index, weekly_avg['NOx(GT)'], marker='s', label='NOx', color='red')

plt.xticks(ticks=range(7), labels=days_labels)  # Set custom day labels
plt.title('Weekly Patterns (Average by Day of Week)')
plt.xlabel('Day of the Week')
plt.ylabel('Average Concentration')
plt.grid(True)
plt.legend()
plt.show()

# Plot Weekly Pattern for Benzene
plt.figure(figsize=(10, 5))
plt.plot(weekly_avg.index, weekly_avg['C6H6(GT)'], marker='^', label='Benzene', color='green')

plt.xticks(ticks=range(7), labels=days_labels)  # Set custom day labels
plt.title('Weekly Patterns (Average by Day of Week)')
plt.xlabel('Day of the Week')
plt.ylabel('Average Concentration')
plt.grid(True)
plt.legend()
plt.show()

# Plot Weekly Pattern for NO2
plt.figure(figsize=(10, 5))
plt.plot(weekly_avg.index, weekly_avg['NO2(GT)'], marker='D', label='NO2', color='orange')

plt.xticks(ticks=range(7), labels=days_labels)  # Set custom day labels
plt.title('Weekly Patterns (Average by Day of Week)')
plt.xlabel('Day of the Week')
plt.ylabel('Average Concentration')
plt.grid(True)
plt.legend()
plt.show()

# Correlation heatmap
# Compute correlation matrix

pollutant_data = df[['CO(GT)', 'NOx(GT)', 'C6H6(GT)','NO2(GT)']]
corr_matrix = pollutant_data.corr()

# Create heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5)

# Add title
plt.title("Correlation Heatmap of Pollutants")

# Show plot
plt.show()

# Set the 'DateTime' as the index
df.set_index('DateTime')

# Autocorrelation Plot (ACF) for CO
plt.figure(figsize=(10, 5))
plot_acf(df['CO(GT)'], lags=90)  # You can change 'lags' to the number of lags you want to analyze
plt.title('Autocorrelation Plot of CO')
plt.show()

# Partial Autocorrelation Plot (PACF) for CO
plt.figure(figsize=(10, 5))
plot_pacf(df['CO(GT)'], lags=90)  # You can change 'lags' to the number of lags you want to analyze
plt.title('Partial Autocorrelation Plot of CO')
plt.show()

# Autocorrelation Plot (ACF) for NOx
plt.figure(figsize=(10, 5))
plot_acf(df['NOx(GT)'], lags=90)  # You can change 'lags' to the number of lags you want to analyze
plt.title('Autocorrelation Plot of NOx')
plt.show()

# Partial Autocorrelation Plot (PACF) for NOx
plt.figure(figsize=(10, 5))
plot_pacf(df['NOx(GT)'], lags=90)  # You can change 'lags' to the number of lags you want to analyze
plt.title('Partial Autocorrelation Plot of NOx')
plt.show()

# Autocorrelation Plot (ACF) for Benzene
plt.figure(figsize=(10, 5))
plot_acf(df['C6H6(GT)'], lags=90)  # You can change 'lags' to the number of lags you want to analyze
plt.title('Autocorrelation Plot of Benzene')
plt.show()

# Partial Autocorrelation Plot (PACF) for Benzene
plt.figure(figsize=(10, 5))
plot_pacf(df['C6H6(GT)'], lags=90)  # You can change 'lags' to the number of lags you want to analyze
plt.title('Partial Autocorrelation Plot of Benzene')
plt.show()

# Autocorrelation Plot (ACF) for NO2
plt.figure(figsize=(10, 5))
plot_acf(df['NO2(GT)'], lags=90)  # You can change 'lags' to the number of lags you want to analyze
plt.title('Autocorrelation Plot of NO2')
plt.show()

# Partial Autocorrelation Plot (PACF) for NO2
plt.figure(figsize=(10, 5))
plot_pacf(df['NO2(GT)'], lags=90)  # You can change 'lags' to the number of lags you want to analyze
plt.title('Partial Autocorrelation Plot of NO2')
plt.show()

# Decompose the time series into trend, seasonal, and residual components
# CO
ts_co = df['CO(GT)']

# STL Decomposition
decomposition = seasonal_decompose(ts_co, model='additive', period=365)  # 'period' depends on data frequency

# Plot the Decomposition
fig, axes = plt.subplots(4, 1, figsize=(12, 8), sharex=True)

decomposition.observed.plot(ax=axes[0], color='blue', title="Observed (Original Series)")
decomposition.trend.plot(ax=axes[1], color='red', title="Trend")
decomposition.seasonal.plot(ax=axes[2], color='green', title="Seasonality")
decomposition.resid.plot(ax=axes[3], color='gray', title="Residuals (Noise)")

plt.suptitle("Decomposition of CO(GT) Time Series", fontsize=16)

plt.tight_layout()
plt.show()

# NOx
ts_co = df['NOx(GT)']

# STL Decomposition
decomposition = seasonal_decompose(ts_co, model='additive', period=365)  # 'period' depends on data frequency

# Plot the Decomposition
fig, axes = plt.subplots(4, 1, figsize=(12, 8), sharex=True)

decomposition.observed.plot(ax=axes[0], color='blue', title="Observed (Original Series)")
decomposition.trend.plot(ax=axes[1], color='red', title="Trend")
decomposition.seasonal.plot(ax=axes[2], color='green', title="Seasonality")
decomposition.resid.plot(ax=axes[3], color='gray', title="Residuals (Noise)")
plt.suptitle("Decomposition of NOx(GT) Time Series", fontsize=16)

plt.tight_layout()
plt.show()

# Benzene
ts_co = df['C6H6(GT)']

# STL Decomposition
decomposition = seasonal_decompose(ts_co, model='additive', period=365)  # 'period' depends on data frequency

# Plot the Decomposition
fig, axes = plt.subplots(4, 1, figsize=(12, 8), sharex=True)

decomposition.observed.plot(ax=axes[0], color='blue', title="Observed (Original Series)")
decomposition.trend.plot(ax=axes[1], color='red', title="Trend")
decomposition.seasonal.plot(ax=axes[2], color='green', title="Seasonality")
decomposition.resid.plot(ax=axes[3], color='gray', title="Residuals (Noise)")
# Add a title for the entire figure
plt.suptitle("Decomposition of Benzene(GT) Time Series", fontsize=16)

plt.tight_layout()
plt.show()

# NO2
ts_co = df['NO2(GT)']

# STL Decomposition
decomposition = seasonal_decompose(ts_co, model='additive', period=365)  # 'period' depends on data frequency

# Plot the Decomposition
fig, axes = plt.subplots(4, 1, figsize=(12, 8), sharex=True)

decomposition.observed.plot(ax=axes[0], color='blue', title="Observed (Original Series)")
decomposition.trend.plot(ax=axes[1], color='red', title="Trend")
decomposition.seasonal.plot(ax=axes[2], color='green', title="Seasonality")
decomposition.resid.plot(ax=axes[3], color='gray', title="Residuals (Noise)")
# Add a title for the entire figure
plt.suptitle("Decomposition of NO2(GT) Time Series", fontsize=16)

plt.tight_layout()
plt.show()

# Decompose the time series into trend, seasonal, and residual components
# Multiplicative
# CO
ts_co = df['CO(GT)']

# STL Decomposition
decomposition = seasonal_decompose(ts_co, model='multiplicative', period=365)  # 'period' depends on data frequency

# Plot the Decomposition
fig, axes = plt.subplots(4, 1, figsize=(12, 8), sharex=True)

decomposition.observed.plot(ax=axes[0], color='blue', title="Observed (Original Series)")
decomposition.trend.plot(ax=axes[1], color='red', title="Trend")
decomposition.seasonal.plot(ax=axes[2], color='green', title="Seasonality")
decomposition.resid.plot(ax=axes[3], color='gray', title="Residuals (Noise)")

plt.suptitle("Decomposition of CO(GT) Time Series", fontsize=16)

plt.tight_layout()
plt.show()

# NOx
ts_co = df['NOx(GT)']

# STL Decomposition
decomposition = seasonal_decompose(ts_co, model='multiplicative', period=365)  # 'period' depends on data frequency

# Plot the Decomposition
fig, axes = plt.subplots(4, 1, figsize=(12, 8), sharex=True)

decomposition.observed.plot(ax=axes[0], color='blue', title="Observed (Original Series)")
decomposition.trend.plot(ax=axes[1], color='red', title="Trend")
decomposition.seasonal.plot(ax=axes[2], color='green', title="Seasonality")
decomposition.resid.plot(ax=axes[3], color='gray', title="Residuals (Noise)")
plt.suptitle("Decomposition of NOx(GT) Time Series", fontsize=16)

plt.tight_layout()
plt.show()

# Benzene
ts_co = df['C6H6(GT)']

# STL Decomposition
decomposition = seasonal_decompose(ts_co, model='multiplicative', period=365)  # 'period' depends on data frequency

# Plot the Decomposition
fig, axes = plt.subplots(4, 1, figsize=(12, 8), sharex=True)

decomposition.observed.plot(ax=axes[0], color='blue', title="Observed (Original Series)")
decomposition.trend.plot(ax=axes[1], color='red', title="Trend")
decomposition.seasonal.plot(ax=axes[2], color='green', title="Seasonality")
decomposition.resid.plot(ax=axes[3], color='gray', title="Residuals (Noise)")
# Add a title for the entire figure
plt.suptitle("Decomposition of Benzene(GT) Time Series", fontsize=16)

plt.tight_layout()
plt.show()

# NO2
ts_co = df['NO2(GT)']

# STL Decomposition
decomposition = seasonal_decompose(ts_co, model='multiplicative', period=365)  # 'period' depends on data frequency

# Plot the Decomposition
fig, axes = plt.subplots(4, 1, figsize=(12, 8), sharex=True)

decomposition.observed.plot(ax=axes[0], color='blue', title="Observed (Original Series)")
decomposition.trend.plot(ax=axes[1], color='red', title="Trend")
decomposition.seasonal.plot(ax=axes[2], color='green', title="Seasonality")
decomposition.resid.plot(ax=axes[3], color='gray', title="Residuals (Noise)")
# Add a title for the entire figure
plt.suptitle("Decomposition of NO2(GT) Time Series", fontsize=16)

plt.tight_layout()
plt.show()

